<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- 加载 properties -->
    <context:property-placeholder
        location="classpath:jdbc.properties" ignore-unresolvable="true" />
    <!-- 配置数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描mybatis所有映射文件 -->
        <property name="mapperLocations" value="classpath:com/guoyun/dao/*.xml"/>
        <property name="typeAliasesPackage" value="com.guoyun.pojo"/>

        <!--打印SQL语句-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--页码插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            <!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库-->
                            dialect=postgresql
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--定义声明事务（面向切面）-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*"
                       isolation="REPEATABLE_READ" rollback-for="Exception"/>
            <tx:method name="update*"
                       isolation="REPEATABLE_READ" rollback-for="Exception"/>
            <tx:method name="delete*"
                       isolation="REPEATABLE_READ" rollback-for="Exception"/>
            <tx:method name="get*"
                       isolation="REPEATABLE_READ" read-only="true"/>
            <tx:method name="*" propagation="NOT_SUPPORTED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 切入点 -->
    <aop:config>
        <aop:pointcut id="point" expression="execution(* com.guoyun.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="point"/>
    </aop:config>

    <!-- 扫描 service -->
    <context:component-scan base-package="com.guoyun.impl">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!-- 扫描所有 mybatis 的 dao 接口，生成代理实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.guoyun.dao"/>
    </bean>


    <!--引入配置属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- redis -->
    <!-- jedis 配置 -->
    <!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean >-->
    <!-- redis服务器中心 -->
    <!--<bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
        <property name="poolConfig" ref="poolConfig" />
        <property name="port" value="${redis.port}" />
        <property name="hostName" value="${redis.host}" />
        &lt;!&ndash;<property name="password" value="${redis.password}" />&ndash;&gt;
        <property name="timeout" value="${redis.timeout}" ></property>
    </bean >-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="connectionFactory" />
        &lt;!&ndash;普通的连接使用没有办法把 Java 对象直接存入 Redis，可以使用 Spring 内部提供的 RedisSerializer 接口和一些实现类实现序列化和反序列化。
　　     JdkSerializationRedisSerializer是使用 JDK 的序列化器进行转换，而StringRedisSerializer使用字符串进行序列化
        由于需要配置key和value两个不同的序列化方式，那么可以指定各自使用的序列化器&ndash;&gt;

        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean >-->
    <!--<bean id="redisUtil" class="com.guoyun.util.RedisUtil" >
        <property name="redisTemplate" ref="redisTemplate" />
    </bean >-->



</beans>